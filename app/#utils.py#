import requests
import pandas as pd
import logging
from sklearn.preprocessing import MultiLabelBinarizer

logging.basicConfig(level=logging.DEBUG)

# Fetch match data from OpenDota API
def fetch_match_data(match_id):
    url = f"https://api.opendota.com/api/matches/{match_id}"
    try:
        response = requests.get(url)
        response.raise_for_status()
        logging.debug(f"Fetched match data: {response.json()}")
        return response.json()
    except requests.exceptions.RequestException as e:
        logging.error(f"Error fetching match data: {e}")
        return None

# Preprocess match data
def preprocess_match_data(match_data):
    try:
        logging.debug(f"Preprocessing match data: {match_data}")
        players = match_data.get('players', [])

        # Extract Radiant and Dire heroes
        radiant_heroes = [int(player['hero_id']) for player in players if player['isRadiant']]
        dire_heroes = [int(player['hero_id']) for player in players if not player['isRadiant']]

        # Check if Radiant won the match
        radiant_win = int(match_data.get('radiant_win', 0))  # Ensure it's an integer

        # Construct the result dictionary with hero columns
        features = {f'radiant_hero_{i}': (hero_id if i < len(radiant_heroes) else 0) 
                    for i, hero_id in enumerate(radiant_heroes)}
        features.update({f'dire_hero_{i}': (hero_id if i < len(dire_heroes) else 0) 
                         for i, hero_id in enumerate(dire_heroes)})
        
        features['radiant_win'] = radiant_win

        logging.debug(f"Preprocessed match features: {features}")
        return features
    except Exception as e:
        logging.error(f"Error in preprocessing: {e}")
        return None

# Convert list of match data to DataFrame
def preprocess_detailed_matches(detailed_matches):
    preprocessed_data = [preprocess_match_data(match) for match in detailed_matches if match]

    if not preprocessed_data:
        return pd.DataFrame()  # Return an empty DataFrame if no data

    df = pd.DataFrame(preprocessed_data)
    
    # Identify all possible hero columns to ensure consistency
    radiant_columns = {col for col in df.columns if col.startswith('radiant_hero_')}
    dire_columns = {col for col in df.columns if col.startswith('dire_hero_')}
    
    all_columns = list(radiant_columns | dire_columns)
    
    # Create a DataFrame with all possible columns and fill missing columns with zeros
    final_df = pd.DataFrame(columns=all_columns + ['radiant_win'])
    final_df = pd.concat([final_df, df], axis=0, ignore_index=True).fillna(0)

    logging.debug(f"DataFrame columns: {final_df.columns}")
    logging.debug(f"First few rows:\n{final_df.head()}")
    return final_df
